2025-03-13

Lua engine nvim
    nvim has the following libraries available for lua
        - lua stdlib composed of:
            :lua print(vim.inspect(vim)), this inspects the whole vim.* module
            - 'editor stdlib' API
                interface to vimscript
                available through vim.*
                    - vimscript functions
                    - ex commands
            - the lua API
                available through vim.api.* specifically

Ex commands vs Built-in commands
    They are not the same

    Ex commands are called through the ':' interface
    Built-in commands are called either from a vimscript or through 
    the :call Ex command

runtimepath and searching modules
    runtime path is a list of comma separated directories

    first nvim looks for .lua modules, then searches for .dll or .so modules

    nvim adjusts package.cpath and package.path according to the 'runtimepath' value
    this happens anytime the runtimepath is changed

Package searchers
    --> https://www.lua.org/manual/5.4/manual.html#pdf-package.cpath
    A table used by the require() function
    It contains 4 searcher functions
        - looks for a loader in the package.preload table
        - looks for a loader as a Lua library stored in package.path (package.searchpath)
        - loader in the C library given by package.cpath

    package.searchpath()
        package.path is the input to this function
        it replaces the '?'s in path with the module named requested by 'required' and tries
        to load these modules

    conlcusion
        nvim prepends the search paths with the runtimepath paths

        lua does its thing by first searching the lua modules (through the lua loader) and
        then the c modules (through the C loader)

    runtimepath is the thing that neovim provides, everything else is lua

package.cpath
package.path
    they are a list of patterns with a '?' e.g.:
        ./?.so;./?.dll
    the question mark gets substituted by the name of the searched module
    
    These paths are only used if the .lua modules where not found

package.cpath vs package.path

    For example, if 'runtimepath' is `foo,bar` and |package.cpath| was
    `./?.so;./?.dll` at startup, `require('mod')` searches these paths in order
    and loads the first module found ("first wins"): >
        foo/lua/mod.lua
        foo/lua/mod/init.lua
        bar/lua/mod.lua
        bar/lua/mod/init.lua
        foo/lua/mod.so
        foo/lua/mod.dll
        bar/lua/mod.so
        bar/lua/mod.dll

Initialization
    Step 7 of neovim initialization is where user config is introduced
        aka. load the init.lua
    Step 10, load plugin scripts
        Lua scripts
            load all the .lua's inside the plugin dirs in 'runtimepath'
                aka. -> runtimepath/plugin/*.lua
            note that directories ending in after will be skipped
        packages
            packages are loaded, they are inside an special directory 'packpath'
            same situation, nvim looks for the plugin dirs, and *after dirs are skipped
        the after/ scripts are loaded
    
Lua vimscript bridge
    Note that objects passed to vim functions are always passed by copy, meaning
    that you cannot edit a lua's object from a vim function

    The folowing commands represent the interface of such bridge

        vim.call(<funct>, <...>)
            equivalent to vim.fn.<funct>(<...>)
        vim.fn.<funct>(<...>)
            these are vim's built-in functions or user-defined functions
        vim.cmd(<command>)
            these are the ':' commands
            ** and overall vimscript?
            Note that you cannot directly retreive values from this call

Printing in neovim
    Note that whenever the printing string is too big, neoivm calls less (or 'more' command) in
    order to get an scrollable output

ToggleTerm
    The ToggleTerm command smartly creates a new terminal if not present already only if a number was
    perpended to the command i.e. 2ToggleTerm, otherwise if ther is no number, nothing will happen, since
    nothing is created
        v:count 0 = toggle the last terminal

TODO
    - TODO: study out nvchad framework
    - TODO: Optimize cmp configuration
    - TODO: Add latex support for math notes
    - TODO: Re-factor neovim
    - TODO: Understand lua integration better, get confident with it
    - TODO: Add a script for querying out the todo aspects 
    - TODO: Maybe try copilot configuration
    - TODO: integrate tmux with nvim
    - TODO: Integrate debuging facilities for c++ (clangd/gbd)
    - TODO: Nerdfonts? and devicons?
    - TODO: Create menu for selecting colorscehemes
    - TODO: Lua scripts for ensuring the 3rd party dependencies 
    - TODO: add keybind for rendering types of files i.e. 
        <leader>gx, if markdown then do :MarkDownPreview
                    if latex file, then compile it through latex

    - TODO: Change packer to lazy vim plugin manager
        --> https://lazy.folke.io

    - TODO: Add a command to view project stats:
        - number of files
        - time spent?
        - number of lines?
        - TODO list
        - dates on first and last creation
        - etc
        - what do you ask about when you generally talk about a project

    - TODO: add easy way to get file size

    - TODO: add python venv handling

ISSUES
    - FIX: <Esc> key is kinda slow for some reason
    
DEPENDENCIES
    Dependendcies are components that need to be installed outside git, should be
    identified so they can be scripted out during neovim config installation
    - packer
    - fzf
    - node
    - cargo
    - python
    - Ninja compiler
    - homebrew

